module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateRocket {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createRocket(data: RocketCreateInput!): Rocket!
  updateRocket(data: RocketUpdateInput!, where: RocketWhereUniqueInput!): Rocket
  updateManyRockets(data: RocketUpdateManyMutationInput!, where: RocketWhereInput): BatchPayload!
  upsertRocket(where: RocketWhereUniqueInput!, create: RocketCreateInput!, update: RocketUpdateInput!): Rocket!
  deleteRocket(where: RocketWhereUniqueInput!): Rocket
  deleteManyRockets(where: RocketWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  rocket(where: RocketWhereUniqueInput!): Rocket
  rockets(where: RocketWhereInput, orderBy: RocketOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rocket]!
  rocketsConnection(where: RocketWhereInput, orderBy: RocketOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RocketConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Rocket {
  id: ID!
  createTime: DateTime!
  name: String!
  createdBy: User
}

type RocketConnection {
  pageInfo: PageInfo!
  edges: [RocketEdge]!
  aggregate: AggregateRocket!
}

input RocketCreateInput {
  id: ID
  name: String!
  createdBy: UserCreateOneWithoutRocketsInput
}

input RocketCreateManyWithoutCreatedByInput {
  create: [RocketCreateWithoutCreatedByInput!]
  connect: [RocketWhereUniqueInput!]
}

input RocketCreateWithoutCreatedByInput {
  id: ID
  name: String!
}

type RocketEdge {
  node: Rocket!
  cursor: String!
}

enum RocketOrderByInput {
  id_ASC
  id_DESC
  createTime_ASC
  createTime_DESC
  name_ASC
  name_DESC
}

type RocketPreviousValues {
  id: ID!
  createTime: DateTime!
  name: String!
}

input RocketScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createTime: DateTime
  createTime_not: DateTime
  createTime_in: [DateTime!]
  createTime_not_in: [DateTime!]
  createTime_lt: DateTime
  createTime_lte: DateTime
  createTime_gt: DateTime
  createTime_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [RocketScalarWhereInput!]
  OR: [RocketScalarWhereInput!]
  NOT: [RocketScalarWhereInput!]
}

type RocketSubscriptionPayload {
  mutation: MutationType!
  node: Rocket
  updatedFields: [String!]
  previousValues: RocketPreviousValues
}

input RocketSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RocketWhereInput
  AND: [RocketSubscriptionWhereInput!]
  OR: [RocketSubscriptionWhereInput!]
  NOT: [RocketSubscriptionWhereInput!]
}

input RocketUpdateInput {
  name: String
  createdBy: UserUpdateOneWithoutRocketsInput
}

input RocketUpdateManyDataInput {
  name: String
}

input RocketUpdateManyMutationInput {
  name: String
}

input RocketUpdateManyWithoutCreatedByInput {
  create: [RocketCreateWithoutCreatedByInput!]
  delete: [RocketWhereUniqueInput!]
  connect: [RocketWhereUniqueInput!]
  set: [RocketWhereUniqueInput!]
  disconnect: [RocketWhereUniqueInput!]
  update: [RocketUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [RocketUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [RocketScalarWhereInput!]
  updateMany: [RocketUpdateManyWithWhereNestedInput!]
}

input RocketUpdateManyWithWhereNestedInput {
  where: RocketScalarWhereInput!
  data: RocketUpdateManyDataInput!
}

input RocketUpdateWithoutCreatedByDataInput {
  name: String
}

input RocketUpdateWithWhereUniqueWithoutCreatedByInput {
  where: RocketWhereUniqueInput!
  data: RocketUpdateWithoutCreatedByDataInput!
}

input RocketUpsertWithWhereUniqueWithoutCreatedByInput {
  where: RocketWhereUniqueInput!
  update: RocketUpdateWithoutCreatedByDataInput!
  create: RocketCreateWithoutCreatedByInput!
}

input RocketWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createTime: DateTime
  createTime_not: DateTime
  createTime_in: [DateTime!]
  createTime_not_in: [DateTime!]
  createTime_lt: DateTime
  createTime_lte: DateTime
  createTime_gt: DateTime
  createTime_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdBy: UserWhereInput
  AND: [RocketWhereInput!]
  OR: [RocketWhereInput!]
  NOT: [RocketWhereInput!]
}

input RocketWhereUniqueInput {
  id: ID
}

type Subscription {
  rocket(where: RocketSubscriptionWhereInput): RocketSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  rockets(where: RocketWhereInput, orderBy: RocketOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rocket!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  rockets: RocketCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutRocketsInput {
  create: UserCreateWithoutRocketsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutRocketsInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  rockets: RocketUpdateManyWithoutCreatedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneWithoutRocketsInput {
  create: UserCreateWithoutRocketsInput
  update: UserUpdateWithoutRocketsDataInput
  upsert: UserUpsertWithoutRocketsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutRocketsDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutRocketsInput {
  update: UserUpdateWithoutRocketsDataInput!
  create: UserCreateWithoutRocketsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  rockets_every: RocketWhereInput
  rockets_some: RocketWhereInput
  rockets_none: RocketWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    